diff --git a/screens/AllCodeList.js b/screens/AllCodeList.js
index fddc7c1..2398aaf 100644
--- a/screens/AllCodeList.js
+++ b/screens/AllCodeList.js
@@ -1,16 +1,23 @@
 import React, { useState, useEffect } from 'react';
-import { StyleSheet, Text, View, FlatList, Image, TouchableOpacity, TextInput } from 'react-native';
+import { StyleSheet, Text, View, FlatList, Image, TouchableOpacity, TextInput, ActivityIndicator, RefreshControl } from 'react-native';
 import { Badge } from 'react-native-paper'; 
 import SearchBar from 'react-native-dynamic-search-bar';
 import Colors from '../config/Colors';
+import Modal from 'react-native-modal';
 
 export default AllCodeList = () => {
 
     const [search, setSearch] = useState('');
     const [filteredDataSource, setFilteredDataSource] = useState([]);
     const [masterDataSource, setMasterDataSource] = useState([]);
+    const [isLoading, setIsLoading] = useState(true);
+    const [refreshing, setRefreshing] = useState(false);
 
-    const initList = () => {
+    useEffect(() => {
+        InitList();
+    }, []);
+
+    const InitList = () => {
 
         /** SESSION VALUE */
         const userId = 1;
@@ -25,11 +32,13 @@ export default AllCodeList = () => {
         .then((responseJson) => {
           setFilteredDataSource(responseJson);
           setMasterDataSource(responseJson);
+          setIsLoading(false);
+          setRefreshing(false);
         })
         .catch(error => console.log('error', error));
     }
 
-    const updateFavouriteItem = (itemId) => {
+    const UpdateFavouriteItem = (itemId) => {
         
         /** SESSION VALUE */
         const userId = 1;
@@ -62,11 +71,7 @@ export default AllCodeList = () => {
         .catch(error => console.log('error', error));
     }  
 
-    useEffect(() => {
-        initList();
-    }, []);
-
-    const searchFilterFunction = (text) => {
+    const SearchFilterFunction = (text) => {
             if (text) {
                 const excludeColumns = ["id"];
                 const newData = masterDataSource.filter(function (item) {
@@ -116,7 +121,7 @@ export default AllCodeList = () => {
                         <Text style={styles.itemQuestion}>{item.name}</Text>
                         <Text style={styles.itemAnswer}>{item.short_solution}</Text>
                     </View>
-                    <TouchableOpacity onPress={() => updateFavouriteItem(item.id)}>
+                    <TouchableOpacity onPress={() => UpdateFavouriteItem(item.id)}>
                     <View style={styles.itemBodyRight}>
                         {
                             item.is_favorite ? 
@@ -129,25 +134,57 @@ export default AllCodeList = () => {
                 </View>
             </View>
         );
-      };
+    };
+
+    const Content = () => {
+        return (
+            <View>
+                <SearchBar
+                    style={styles.searchInputText}
+                    fontColor="#c6c6c6"
+                    iconColor="#c6c6c6"
+                    cancelIconColor="#c6c6c6"
+                    placeholder="Search here"
+                    onChangeText={(text) => SearchFilterFunction(text)}
+                    onClearPress={() => SearchFilterFunction("")}
+                />
+                <FlatList style={styles.gridView}
+                    data={filteredDataSource} 
+                    keyExtractor={(item, index) => index.toString()}
+                    renderItem={ItemView}
+                    refreshControl={
+                        <RefreshControl
+                          refreshing={refreshing}
+                          onRefresh={OnRefresh}
+                        />
+                      }
+                />
+            </View>
+        );
+    }
+
+    const Spinner = () => {
+        return (
+            <View style={{alignItems:'center', justifyContent:'center', flex:1,}}>
+                <ActivityIndicator size="large" color={Colors.white} />
+            </View>
+        );
+    }
+
+    const wait = (timeout) => {
+        return new Promise(resolve => setTimeout(resolve, timeout));
+    }
+    const OnRefresh = React.useCallback(() => {
+        setRefreshing(true);
+        wait(1500).then(() => InitList());
+    }, []);
 
     return (
     <View style={styles.container}>
         <View style={styles.bodySubView}>
-            <SearchBar
-                style={styles.searchInputText}
-                fontColor="#c6c6c6"
-                iconColor="#c6c6c6"
-                cancelIconColor="#c6c6c6"
-                placeholder="Search here"
-                onChangeText={(text) => searchFilterFunction(text)}
-                onClearPress={() => searchFilterFunction("")}
-            />
-            <FlatList style={styles.gridView}
-                data={filteredDataSource} 
-                keyExtractor={(item, index) => index.toString()}
-                renderItem={ItemView}
-            />
+            {
+                isLoading ? <Spinner/> : <Content/>
+            }
         </View>
     </View>
     );
